#!/bin/bash
# Smoke tests for Week 3 ORM API implementation
# Tests tag filtering, sorting, and combined operations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

API_BASE_URL="http://localhost:5001/api/v1"
TEST_COUNT=0
PASS_COUNT=0
FAIL_COUNT=0

print_header() {
    echo ""
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}============================================================${NC}"
}

print_test() {
    TEST_COUNT=$((TEST_COUNT + 1))
    echo -e "\n${YELLOW}üß™ Test $TEST_COUNT: $1${NC}"
}

print_pass() {
    PASS_COUNT=$((PASS_COUNT + 1))
    echo -e "${GREEN}‚úÖ PASS${NC}: $1"
}

print_fail() {
    FAIL_COUNT=$((FAIL_COUNT + 1))
    echo -e "${RED}‚ùå FAIL${NC}: $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Check if API is running
check_api() {
    if ! curl -s "${API_BASE_URL}/health-check" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Error: API is not running at ${API_BASE_URL}${NC}"
        echo -e "${YELLOW}Please start the API first:${NC}"
        echo "  cd week-3/tutorial/ORM && DB_HOST=localhost python app.py"
        echo "  OR"
        echo "  ./auto/run python week-3/tutorial/ORM/app.py"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ API is running${NC}"
}

# Test helper function
test_endpoint() {
    local description="$1"
    local url="$2"
    local expected_status="${3:-200}"
    local check_function="${4:-}"
    
    print_test "$description"
    
    # Make request and capture response
    response=$(curl -s -w "\n%{http_code}" "$url")
    http_code=$(echo "$response" | tail -n 1)
    body=$(echo "$response" | sed '$d')
    
    # Check HTTP status code
    if [ "$http_code" != "$expected_status" ]; then
        print_fail "Expected status $expected_status, got $http_code"
        echo "Response: $body"
        return 1
    fi
    
    # Run custom check function if provided
    if [ -n "$check_function" ]; then
        if ! $check_function "$body"; then
            return 1
        fi
    fi
    
    print_pass "$description"
    return 0
}

# Check functions for validation
check_thoughts_count() {
    local body="$1"
    local count=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(len(data.get('data', {}).get('thoughts', [])))")
    if [ "$count" -gt 0 ]; then
        print_info "Found $count thoughts"
        return 0
    else
        print_fail "No thoughts found in response"
        return 1
    fi
}

check_filters_applied() {
    local body="$1"
    local has_filters=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print('tags' in data.get('data', {}).get('filters_applied', {}))")
    if [ "$has_filters" = "True" ]; then
        print_info "Filters were applied"
        return 0
    else
        print_fail "No filters found in response"
        return 1
    fi
}

check_sorting_info() {
    local body="$1"
    local has_sorting=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print('field' in data.get('data', {}).get('sorting', {}))")
    if [ "$has_sorting" = "True" ]; then
        print_info "Sorting info present"
        return 0
    else
        print_fail "No sorting info found in response"
        return 1
    fi
}

check_error_message() {
    local body="$1"
    local has_error=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print('error' in data)")
    if [ "$has_error" = "True" ]; then
        local error_msg=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('error', ''))")
        print_info "Error message: $error_msg"
        return 0
    else
        print_fail "Expected error message not found"
        return 1
    fi
}

# Main test execution
main() {
    print_header "Week 3 ORM API Smoke Tests"
    
    print_info "Checking if API is running..."
    check_api
    
    print_header "Setup: Creating Test Data"
    print_info "Creating test thoughts with various tags..."
    
    create_response=$(curl -s -X POST "${API_BASE_URL}/thoughts" \
        -H "Content-Type: application/json" \
        -d '{
            "thoughts": [
                {"text": "Learning SQL is important for backend development", "tags": ["learning", "sql"]},
                {"text": "Remember to work on the important project deadline", "tags": ["work", "important"]},
                {"text": "Personal learning goals for this quarter", "tags": ["personal", "learning"]}
            ]
        }')
    
    if echo "$create_response" | grep -q '"status":"success"'; then
        echo -e "${GREEN}‚úÖ Test data created successfully${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Test data may already exist or creation failed${NC}"
    fi
    
    print_header "Basic Functionality Tests"
    
    # Test 1: Get all thoughts
    test_endpoint \
        "Get all thoughts with pagination" \
        "${API_BASE_URL}/thoughts?limit=10" \
        200 \
        check_thoughts_count
    
    # Test 2: Health check
    test_endpoint \
        "Health check endpoint" \
        "${API_BASE_URL}/health-check" \
        200
    
    print_header "Tag Filtering Tests"
    
    # Test 3: Filter by single tag
    test_endpoint \
        "Filter by single tag 'work'" \
        "${API_BASE_URL}/thoughts?tags=work" \
        200 \
        check_filters_applied
    
    # Test 4: Filter by single tag (different tag)
    test_endpoint \
        "Filter by single tag 'important'" \
        "${API_BASE_URL}/thoughts?tags=important" \
        200 \
        check_filters_applied
    
    # Test 5: Filter by multiple tags (OR logic)
    test_endpoint \
        "Filter by multiple tags 'work,learning'" \
        "${API_BASE_URL}/thoughts?tags=work,learning" \
        200 \
        check_filters_applied
    
    # Test 6: Case insensitive filtering
    test_endpoint \
        "Case insensitive filtering 'IMPORTANT'" \
        "${API_BASE_URL}/thoughts?tags=IMPORTANT" \
        200 \
        check_filters_applied
    
    print_header "Sorting Tests"
    
    # Test 7: Sort by id ascending
    test_endpoint \
        "Sort by id ascending" \
        "${API_BASE_URL}/thoughts?sort=id&order=asc&limit=5" \
        200 \
        check_sorting_info
    
    # Test 8: Sort by text descending
    test_endpoint \
        "Sort by text descending" \
        "${API_BASE_URL}/thoughts?sort=text&order=desc&limit=5" \
        200 \
        check_sorting_info
    
    # Test 9: Sort by created_at (default)
    test_endpoint \
        "Default sorting by created_at" \
        "${API_BASE_URL}/thoughts?limit=5" \
        200 \
        check_sorting_info
    
    # Test 10: Invalid sort field (should fallback to default)
    test_endpoint \
        "Invalid sort field fallback to default" \
        "${API_BASE_URL}/thoughts?sort=invalid_field&order=asc&limit=3" \
        200 \
        check_sorting_info
    
    print_header "Validation Tests"
    
    # Test 11: Invalid order parameter (should return 400)
    test_endpoint \
        "Invalid order parameter returns 400" \
        "${API_BASE_URL}/thoughts?sort=id&order=invalid" \
        400 \
        check_error_message
    
    print_header "Combined Operations Tests"
    
    # Test 12: Filter and sort combined
    test_endpoint \
        "Filter by tag and sort by id" \
        "${API_BASE_URL}/thoughts?tags=important&sort=id&order=asc&limit=5" \
        200
    
    # Test 13: Multiple tags with custom sorting
    test_endpoint \
        "Multiple tags with text sorting" \
        "${API_BASE_URL}/thoughts?tags=work,learning&sort=text&order=desc&limit=5" \
        200
    
    # Test 14: All parameters combined
    test_endpoint \
        "All query parameters combined" \
        "${API_BASE_URL}/thoughts?tags=learning&sort=created_at&order=asc&limit=3" \
        200
    
    print_header "Test Summary"
    echo ""
    echo -e "Total Tests:  ${BLUE}${TEST_COUNT}${NC}"
    echo -e "Passed:       ${GREEN}${PASS_COUNT}${NC}"
    echo -e "Failed:       ${RED}${FAIL_COUNT}${NC}"
    echo ""
    
    if [ $FAIL_COUNT -eq 0 ]; then
        echo -e "${GREEN}üéâ All smoke tests passed!${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå Some tests failed${NC}"
        exit 1
    fi
}

# Run main function
main
