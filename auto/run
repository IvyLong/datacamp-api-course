#!/bin/bash
# filepath: /Users/ivy.long/Workplace/courses/API/api-course-code/week-1/workshop_2/auto/run

# Simplified auto/run script
# Usage: ./auto/run <command> [args...]
# Example: ./auto/run python exercise/raw_http/thought_tagger.py "My thought"

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

show_usage() {
    echo "Usage: ./auto/run <command> [args...]"
    echo ""
    echo "Examples:"
    echo "  ./auto/run python {file path}"
    echo "  ./auto/run python week-1/workshop_2/exercise/raw_http/thought_tagger.py \"My thought\""
}

# Check if Docker is available
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker is not running. Please start Docker first."
        exit 1
    fi
}

# Build Docker image (uses cached layers when possible)
build_image() {
    local image_name="thought-tagger-workshop"
    
    print_info "Building Docker image (using cache when possible)..."
    if ! docker build -t $image_name . ; then
        print_error "Failed to build Docker image"
        exit 1
    fi
    print_success "Docker image ready"
}

main() {
    # Check if command is provided
    if [ $# -lt 1 ]; then
        print_error "No command provided"
        show_usage
        exit 1
    fi
    
    # Handle help
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi
    
    # Check Docker
    check_docker
    
    # Build image (uses Docker layer caching)
    build_image
    
    # Run the command in Docker with volume mounting
    print_info "Executing: $*"
    docker run --rm \
        --env-file <(env) \
        -e DB_HOST=db \
        -e DB_PORT=5432 \
        -e DB_NAME=api_db \
        -e DB_USER=api_user \
        -e DB_PASSWORD=api_password \
        --network api-course-code_api-network \
        -v "$(pwd):/app" \
        -w /app \
        -p 5001:5001 \
        thought-tagger-workshop \
        "$@"
    
    print_success "Command completed!"
}

main "$@"